// Generated by CoffeeScript 1.6.1
(function() {
  var Client, Status, User, WebSocketServer, action, clients, colors, config, db, getClientByName, getLobbyNames, lobby, mongoose, sendLobbyUpdate, wss;

  config = require("./config.json");

  action = require("./action.json");

  colors = require('colors');

  mongoose = require("mongoose");

  colors.setTheme({
    info: 'white',
    turn: 'grey',
    warn: 'yellow',
    debug: 'magenta',
    error: 'red'
  });

  WebSocketServer = require('ws').Server;

  wss = new WebSocketServer({
    port: config.port
  });

  mongoose.connect("mongodb://" + config.mongo_user + ":" + config.mongo_pw + "@localhost:" + config.mongo_port + "/" + config.mongo_name);

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  User = mongoose.model('User', mongoose.Schema({
    name: String,
    phoneID: String,
    points: Number
  }));

  clients = [];

  lobby = [];

  getLobbyNames = function() {
    var client, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = lobby.length; _i < _len; _i++) {
      client = lobby[_i];
      _results.push(client.user.name);
    }
    return _results;
  };

  sendLobbyUpdate = function() {
    var client, names, _i, _len, _results;
    names = getLobbyNames();
    _results = [];
    for (_i = 0, _len = lobby.length; _i < _len; _i++) {
      client = lobby[_i];
      _results.push(client.connection.send(JSON.stringify({
        action: action.server.lobbyUpdate,
        names: names
      })));
    }
    return _results;
  };

  getClientByName = function(name) {
    var client, _i, _len;
    for (_i = 0, _len = lobby.length; _i < _len; _i++) {
      client = lobby[_i];
      if (name === client.user.name) {
        return client;
      }
    }
  };

  Status = {
    unidentified: function(data) {
      console.log(data.action);
      switch (data.action) {
        case action.client.setName:
          this.user.name = data.value;
          this.status = Status.nowhere;
          this.connection.send(JSON.stringify({
            action: action.server.confirm,
            name: this.user.name
          }));
          return console.log("A client set its name to " + this.user.name);
        default:
          return Status.error("unidentified", data);
      }
    },
    nowhere: function(data) {
      switch (data.action) {
        case action.client.goToLobby:
          console.log("" + this.user.name + " goes to the lobby");
          lobby.push(this);
          this.status = Status.lobby;
          console.log("" + lobby.length + " clients are in the lobby");
          return sendLobbyUpdate();
        default:
          return Status.error("nowhere", data);
      }
    },
    lobby: function(data) {
      switch (data.action) {
        case action.client.pair:
          console.log("" + this.user.name + " wants to pair with " + data.partner.user.name);
          this.partner = getClientByName(data.partner);
          this.partner.partner = this;
          lobby.splice(lobby.indexOf(this, 1));
          lobby.splice(lobby.indexOf(this.partner, 1));
          return this.partner.connection.send(JSON.stringify({
            action: action.server.request,
            partner: this.user.name
          }));
        case action.client.accept:
          console.log("" + this.partner.user.name + " has accepted");
          this.partner.connection.send(JSON.stringify({
            action: action.server.start
          }));
          this.status = Status.ingame;
          return this.partner.status = Status.ingame;
        case action.client.deny:
          console.log("" + this.partner.user.name + " has denied");
          this.partner.connection.send(JSON.stringify({
            action: action.server.denied
          }));
          lobby.push(this);
          lobby.push(this.partner);
          this.partner.partner = void 0;
          this.partner = void 0;
          return sendLobbyUpdate();
        default:
          return Status.error("lobby", data);
      }
    },
    ingame: function(data) {
      switch (data.action) {
        case action.client.turn:
          console.log(("[TURN|GAME] " + this.user.name + " has made his turn").turn);
          return this.partner.connection.send(JSON.stringify({
            action: action.server.turn,
            value: data.value
          }));
        default:
          return Status.error("ingame", data);
      }
    },
    error: function(status, data) {
      return console.log(("[ERROR|CLIENT] Client has the status " + status + ". It can not receive the action " + data.action).error);
    }
  };

  Client = function(connection, user) {
    var _this = this;
    this.connection = connection;
    this.user = user;
    this.partner = void 0;
    this.status = this.user.name ? Status.nowhere : Status.unidentified;
    this.connection.on('close', function() {
      if (_this.status === Status.ingame) {
        _this.partner.connection.send(JSON.stringify({
          action: action.server.partnerLeft
        }));
      }
      console.log(("[INFO|CLIENT] " + _this.user.name + " disconnected").info);
      lobby.splice(lobby.indexOf(_this), 1);
      clients.splice(clients.indexOf(_this), 1);
      return console.log(("[GLOBAL] Now there are " + clients.length + " clients online.").info);
    });
    return this.connection.on('message', function(message) {
      var data;
      try {
        data = JSON.parse(message);
        if (data != null ? data.action : void 0) {
          return _this.status(data);
        }
      } catch (e) {
        return console.log("Error parsing " + message + ": " + e);
      }
    });
  };

  wss.on("connection", function(ws) {
    console.log("[INFO|GLOBAL] A client connected.".info);
    ws.on("message", function(message) {
      var data;
      data = JSON.parse(message);
      return User.findOne({
        phoneID: data.id
      }, function(error, user) {
        if (error) {
          return console.log("[ERROR|GLOBAL] Mongo error while finding user".error);
        } else {
          if (user) {
            console.log("[INFO|USER] Found the user in the Database".info);
            console.log(("[DEBUG] Mongo find " + user.phoneID).debug);
            return clients.push(new Client(ws, user));
          } else {
            console.log("[INFO|USER] Could not find the user in the Database".info);
            ws.send(JSON.stringify({
              action: action.server.unknownUser
            }));
            return clients.push(new Client(ws, new User({
              phoneID: data.id
            })));
          }
        }
      });
    });
    return console.log(("[INFO|GLOBAL] Now there are " + clients.length + " clients online.").info);
  });

}).call(this);
